diff --git a/libavformat/mov.c b/libavformat/mov.c
index 2b1131b911..bf56b41eb3 100644
--- a/libavformat/mov.c
+++ b/libavformat/mov.c
@@ -1237,6 +1237,36 @@ static MOVFragmentStreamInfo * get_current_frag_stream_info(
     return NULL;
 }
 
+static MOVFragmentStreamInfo * get_frag_stream_by_sample_index(
+    MOVFragmentIndex *frag_index,
+    int sample_index,
+    int stream_id,
+    int *found_index)
+{
+    int i, j;
+    MOVFragmentIndexItem * item;
+
+    for (i = 0; i < frag_index->nb_items; i++) {
+        item = &frag_index->item[i];
+        for (j = 0; j < item->nb_stream_info; j++) {
+            if (item->stream_info[j].id == stream_id &&
+                item->stream_info[j].index_entry >= sample_index &&
+                (i == frag_index->nb_items - 1 ||
+                 (frag_index->item[i+1].nb_stream_info > j &&
+                  (frag_index->item[i+1].stream_info[j].index_entry == -1 ||
+                   sample_index < frag_index->item[i+1].stream_info[j].index_entry)))) {
+                if (found_index) {
+                    *found_index = i;
+                }
+                return &item->stream_info[j];
+            }
+        }
+    }
+
+    // This shouldn't happen
+    return NULL;
+}
+
 static int search_frag_moof_offset(MOVFragmentIndex *frag_index, int64_t offset)
 {
     int a, b, m;
@@ -5118,7 +5148,7 @@ static int mov_read_trun(MOVContext *c, AVIOContext *pb, MOVAtom atom)
     sc->ctts_count = sti->nb_index_entries;
 
     // Record the index_entry position in frag_index of this fragment
-    if (frag_stream_info)
+    if (frag_stream_info && frag_stream_info->index_entry == -1)  // BUGFIX: In case of multiple trun, this must remain at the first value
         frag_stream_info->index_entry = index_entry_pos;
 
     if (index_entry_pos > 0)
@@ -5986,6 +6016,8 @@ out:
     return ret;
 }
 
+static int mov_read_senc(MOVContext *c, AVIOContext *pb, MOVAtom atom);
+
 static int mov_read_uuid(MOVContext *c, AVIOContext *pb, MOVAtom atom)
 {
     AVStream *st;
@@ -6004,6 +6036,10 @@ static int mov_read_uuid(MOVContext *c, AVIOContext *pb, MOVAtom atom)
         0xff, 0xcc, 0x82, 0x63, 0xf8, 0x55, 0x4a, 0x93,
         0x88, 0x14, 0x58, 0x7a, 0x02, 0x52, 0x1f, 0xdd,
     };
+    static const AVUUID uuid_piff_senc = {
+        0xA2, 0x39, 0x4F, 0x52, 0x5A, 0x9B, 0x4f, 0x14,
+        0xA2, 0x44, 0x6C, 0x42, 0x7C, 0x64, 0x8D, 0xF4
+    };
 
     if (atom.size < AV_UUID_LEN || atom.size >= FFMIN(INT_MAX, SIZE_MAX))
         return AVERROR_INVALIDDATA;
@@ -6086,6 +6122,9 @@ static int mov_read_uuid(MOVContext *c, AVIOContext *pb, MOVAtom atom)
             return ret;
         if (!sc->spherical)
             av_log(c->fc, AV_LOG_WARNING, "Invalid spherical metadata found\n");
+    } else if (av_uuid_equal(uuid, uuid_piff_senc)) {
+        // PATCH: Netflix's stream packager outputs PIFF, which uses an uuid atom for senc boxes.
+        mov_read_senc(c, pb, atom);
     }
 
     return 0;
@@ -6407,7 +6446,12 @@ static int mov_try_read_block(AVIOContext *pb, size_t size, uint8_t **data)
         offset += to_read;
     }
 
-    *data = buffer;
+    // PATCH: The original code leads to huge amounts of memory being hogged during playback (especially CENC streams).
+    *data = av_realloc(buffer, size);
+    if (!*data) {
+        av_free(buffer);
+        return AVERROR(ENOMEM);
+    }
     return 0;
 }
 
@@ -7026,15 +7070,16 @@ static int cbcs_scheme_decrypt(MOVContext *c, MOVStreamContext *sc, AVEncryption
     }
 
     /* whole-block full sample encryption */
-    if (!sample->subsample_count) {
+    // PATCH: Fix for Apple TV+, they have subsamples but don't use pattern encryption.
+    if (!sample->subsample_count || (!sample->crypt_byte_block && !sample->skip_byte_block)) {
         /* decrypt the whole packet */
         memcpy(iv, sample->iv, 16);
         av_aes_crypt(sc->cenc.aes_ctx, input, input, size/16, iv, 1);
         return 0;
-    } else if (!sample->crypt_byte_block && !sample->skip_byte_block) {
+    }/* else if (!sample->crypt_byte_block && !sample->skip_byte_block) {
         av_log(c->fc, AV_LOG_ERROR, "pattern encryption is not present in 'cbcs' scheme\n");
         return AVERROR_INVALIDDATA;
-    }
+    }*/
 
     for (i = 0; i < sample->subsample_count; i++) {
         if (sample->subsamples[i].bytes_of_clear_data + sample->subsamples[i].bytes_of_protected_data > size) {
@@ -7102,10 +7147,20 @@ static int cenc_filter(MOVContext *mov, AVStream* st, MOVStreamContext *sc, AVPa
         // Note this only supports encryption info in the first sample descriptor.
         if (mov->fragment.stsd_id == 1) {
             if (frag_stream_info->encryption_index) {
-                if (!current_index && frag_stream_info->index_entry)
+                // PATCH: Fix seeking backwards in encrypted streams.
+                //av_log(mov->fc, AV_LOG_INFO, "Frag Id: %d Index: %d (frag entry: %d)\n", frag_stream_info->id, current_index, frag_stream_info->index_entry);
+                encrypted_index = current_index - frag_stream_info->index_entry;
+                encryption_index = frag_stream_info->encryption_index;
+                if (encrypted_index < 0 || encrypted_index >= encryption_index->nb_encrypted_samples) {
+                    frag_stream_info = get_frag_stream_by_sample_index(&mov->frag_index, current_index, st->id,
+                                                                        &mov->frag_index.current);
+                    encrypted_index = current_index - frag_stream_info->index_entry;
+                    encryption_index = frag_stream_info->encryption_index;
+                }
+                /*if (!current_index && frag_stream_info->index_entry)
                     sc->cenc.frag_index_entry_base = frag_stream_info->index_entry;
                 encrypted_index = current_index - (frag_stream_info->index_entry - sc->cenc.frag_index_entry_base);
-                encryption_index = frag_stream_info->encryption_index;
+                encryption_index = frag_stream_info->encryption_index;*/
             } else {
                 encryption_index = sc->cenc.encryption_index;
             }
@@ -7133,8 +7188,9 @@ static int cenc_filter(MOVContext *mov, AVStream* st, MOVStreamContext *sc, AVPa
             // Per-sample setting override.
             encrypted_sample = encryption_index->encrypted_samples[encrypted_index];
         } else {
-            av_log(mov->fc, AV_LOG_ERROR, "Incorrect number of samples in encryption info\n");
-            return AVERROR_INVALIDDATA;
+            av_log(mov->fc, AV_LOG_ERROR, "Incorrect number of samples in encryption info (index %d, nb %d)\n", encrypted_index, encryption_index->nb_encrypted_samples);
+            return 0; // CST hack - this can sometimes happen while seeking/switching audio streams, it's a non-fatal error.
+            //return AVERROR_INVALIDDATA;
         }
 
         if (mov->decryption_key) {
@@ -8572,15 +8628,16 @@ static int mov_switch_root(AVFormatContext *s, int64_t target, int index)
 
     if (index >= 0 && index < mov->frag_index.nb_items)
         target = mov->frag_index.item[index].moof_offset;
-    if (avio_seek(s->pb, target, SEEK_SET) != target) {
+    // https://ffmpeg.org/pipermail/ffmpeg-devel/2020-April/261343.html
+    if (target >= 0 && avio_seek(s->pb, target, SEEK_SET) != target) {
         av_log(mov->fc, AV_LOG_ERROR, "root atom offset 0x%"PRIx64": partial file\n", target);
         return AVERROR_INVALIDDATA;
     }
 
     mov->next_root_atom = 0;
-    if (index < 0 || index >= mov->frag_index.nb_items)
+    if ((index < 0 && target >= 0) || index >= mov->frag_index.nb_items)
         index = search_frag_moof_offset(&mov->frag_index, target);
-    if (index < mov->frag_index.nb_items &&
+    if (index >= 0 && index < mov->frag_index.nb_items &&
         mov->frag_index.item[index].moof_offset == target) {
         if (index + 1 < mov->frag_index.nb_items)
             mov->next_root_atom = mov->frag_index.item[index + 1].moof_offset;
@@ -8653,8 +8710,40 @@ static int mov_read_packet(AVFormatContext *s, AVPacket *pkt)
     AVStream *st = NULL;
     int64_t current_index;
     int ret;
+    int i;
     mov->fc = s;
  retry:
+    // https://ffmpeg.org/pipermail/ffmpeg-devel/2020-April/261343.html
+    if (s->pb->pos == 0) {
+
+        // Discard current fragment index
+        if (mov->frag_index.allocated_size > 0) {
+            av_freep(&mov->frag_index.item);
+            mov->frag_index.nb_items = 0;
+            mov->frag_index.allocated_size = 0;
+            mov->frag_index.current = -1;
+            mov->frag_index.complete = 0;
+        }
+
+        for (i = 0; i < s->nb_streams; i++) {
+            AVStream *avst = s->streams[i];
+            FFStream *const avsti = ffstream(avst);
+            MOVStreamContext *msc = avst->priv_data;
+
+            // Clear current sample
+            mov_current_sample_set(msc, 0);
+
+            // Discard current index entries
+            if (avsti->index_entries_allocated_size > 0) {
+                av_freep(&avsti->index_entries);
+                avsti->index_entries_allocated_size = 0;
+                avsti->nb_index_entries = 0;
+            }
+        }
+
+        if ((ret = mov_switch_root(s, -1, -1)) < 0)
+            return ret;
+    }
     sample = mov_find_next_sample(s, &st);
     if (!sample || (mov->next_root_atom && sample->pos > mov->next_root_atom)) {
         if (!mov->next_root_atom)
