From c6f8769255ec6c4bb4ce02879d2332461ef1e24e Mon Sep 17 00:00:00 2001
From: Jacek Jendrzej <satbaby@kawaii.com>
Date: Sat, 12 Aug 2017 17:05:08 +0200
Subject: [PATCH 7/7] add ASF VC1 Annex-G and RCV bitstream filters. Originally
 done by Google but modified by us to convert certain VC1 in MKV without
 startcodes. port fot 3.x

Signed-off-by: Jacek Jendrzej <satbaby@kawaii.com>
---
 libavcodec/Makefile              |   2 +
 libavcodec/bitstream_filters.c   |   2 +
 libavcodec/vc1_asftoannexg_bsf.c | 182 +++++++++++++++++++++++++++++++++++++++
 libavcodec/vc1_asftorcv_bsf.c    |  95 ++++++++++++++++++++
 4 files changed, 281 insertions(+)
 create mode 100644 libavcodec/vc1_asftoannexg_bsf.c
 create mode 100644 libavcodec/vc1_asftorcv_bsf.c

--- a/libavcodec/bitstream_filters.c	2018-11-18 01:58:03.000000000 +0100
+++ b/libavcodec/bitstream_filters.c	2023-02-14 18:26:27.787945035 +0100
@@ -41,6 +41,8 @@ extern const AVBitStreamFilter ff_noise_
 extern const AVBitStreamFilter ff_remove_extradata_bsf;
 extern const AVBitStreamFilter ff_text2movsub_bsf;
 extern const AVBitStreamFilter ff_vp9_superframe_bsf;
+extern const AVBitStreamFilter ff_vc1_asftoannexg_bsf;
+extern const AVBitStreamFilter ff_vc1_asftorcv_bsf;
 
 #include "libavcodec/bsf_list.c"
 
--- a/libavcodec/Makefile	2018-11-18 01:57:59.000000000 +0100
+++ b/libavcodec/Makefile	2023-02-14 18:31:48.627199402 +0100
@@ -987,6 +987,8 @@ OBJS-$(CONFIG_MP3_HEADER_DECOMPRESS_BSF)
 OBJS-$(CONFIG_NOISE_BSF)                  += noise_bsf.o
 OBJS-$(CONFIG_REMOVE_EXTRADATA_BSF)       += remove_extradata_bsf.o
 OBJS-$(CONFIG_TEXT2MOVSUB_BSF)            += movsub_bsf.o
+OBJS-$(CONFIG_VC1_ASFTORCV_BSF)           += vc1_asftorcv_bsf.o
+OBJS-$(CONFIG_VC1_ASFTOANNEXG_BSF)        += vc1_asftoannexg_bsf.o vc1.o
 OBJS-$(CONFIG_VP9_SUPERFRAME_BSF)         += vp9_superframe_bsf.o
 
 # thread libraries
--- a/libavcodec/vc1_asftoannexg_bsf.c	1970-01-01 01:00:00.000000000 +0100
+++ b/libavcodec/vc1_asftoannexg_bsf.c	2023-02-14 18:21:36.120977196 +0100
@@ -0,0 +1,182 @@
+/*
+ * copyright (c) 2010 Google Inc.
+ * copyright (c) 2013 CoolStream International Ltd.
+ * copyright (c) 2017 Jacek Jendrzej port to 3.x
+ * This file is part of FFmpeg.
+ *
+ * FFmpeg is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * FFmpeg is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with FFmpeg; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#include "avcodec.h"
+#include "bytestream.h"
+#include "vc1.h"
+#include "bsf.h"
+
+// An arbitrary limit in bytes greater than the current bytes used.
+#define MAX_SEQ_HEADER_SIZE 50
+
+typedef struct ASFTOANNEXGBSFContext {
+    int frames;
+    uint8_t *seq_header;
+    int seq_header_size;
+    uint8_t *ep_header;
+    int ep_header_size;
+} ASFTOANNEXGBSFContext;
+
+static int find_codec_data(ASFTOANNEXGBSFContext *ctx, uint8_t *data, int data_size, int keyframe) {
+    const uint8_t *start = data;
+    const uint8_t *end = data + data_size;
+    const uint8_t *next;
+    int size;
+    int has_seq_header = 0;
+    int has_ep_header = 0;
+    int has_frame_header = 0;
+
+    start = find_next_marker(start, end);
+    next = start;
+    for(; next < end; start = next){
+        next = find_next_marker(start + 4, end);
+        size = next - start;
+        if(size <= 0) continue;
+        switch(AV_RB32(start)){
+        case VC1_CODE_SEQHDR:
+            has_seq_header = 1;
+            break;
+        case VC1_CODE_ENTRYPOINT:
+            has_ep_header = 1;
+            break;
+        case VC1_CODE_FRAME:
+            has_frame_header = 1;
+            break;
+        default:
+            break;
+        }
+    }
+
+    if((has_seq_header && has_ep_header && has_frame_header && keyframe) ||
+       (!has_seq_header && !has_ep_header && has_frame_header) ) return 0;
+
+    return -1;
+}
+
+static int parse_extradata(ASFTOANNEXGBSFContext *ctx, uint8_t *extradata, int extradata_size) {
+    const uint8_t *start = extradata;
+    const uint8_t *end = extradata + extradata_size;
+    const uint8_t *next;
+    int size;
+
+    start = find_next_marker(start, end);
+    next = start;
+    for(; next < end; start = next){
+        next = find_next_marker(start + 4, end);
+        size = next - start;
+        if(size <= 0) continue;
+        switch(AV_RB32(start)){
+        case VC1_CODE_SEQHDR:
+            ctx->seq_header = av_mallocz(size);
+            ctx->seq_header_size = size;
+            memcpy(ctx->seq_header, start, size);
+            break;
+        case VC1_CODE_ENTRYPOINT:
+            ctx->ep_header = av_malloc(size);
+            ctx->ep_header_size = size;
+            memcpy(ctx->ep_header, start, size);
+            break;
+        default:
+            break;
+        }
+    }
+
+    if(!ctx->seq_header || !ctx->ep_header) {
+        av_log(NULL, AV_LOG_ERROR, "Incomplete extradata\n");
+        return -1;
+    }
+    return 0;
+}
+
+static int asftoannexg_filter(AVBSFContext *ctx, AVPacket *out)
+{
+    ASFTOANNEXGBSFContext* bsfctx = ctx->priv_data;
+    AVPacket *in;
+    int keyframe = 0;
+    int ret = 0;
+    uint8_t* bs = NULL;
+
+    ret = ff_bsf_get_packet(ctx, &in);
+    if (ret < 0)
+        return ret;
+
+    keyframe = in->flags & AV_PKT_FLAG_KEY;
+    if(in->size >= 1 && !find_codec_data(bsfctx, in->data, in->size, keyframe)) {
+//         av_log(NULL, AV_LOG_INFO, "Nothing to do: %i\n",in->size);
+        out->data = in->data;
+        out->size = in->size;
+        return 0;
+    }
+
+    if(!ctx->par_in->extradata || ctx->par_in->extradata_size < 16) {
+        av_log(NULL, AV_LOG_INFO, "Extradata size too small: %i\n", ctx->par_in->extradata_size);
+        out->data = in->data;
+        out->size = in->size;
+        return 0;
+    }
+
+    if (!bsfctx->frames && parse_extradata(bsfctx, ctx->par_in->extradata , ctx->par_in->extradata_size ) < 0) {
+	 av_freep(in);
+        av_log(NULL, AV_LOG_ERROR, "Cannot parse extra data!\n");
+        return -1;
+    }
+
+    if (keyframe) {
+        // If this is the keyframe, need to put sequence header and entry point header.
+        out->size = bsfctx->seq_header_size + bsfctx->ep_header_size + 4 + in->size;
+        out->data = av_malloc(out->size);
+        bs = out->data;
+
+        memcpy(bs, bsfctx->seq_header, bsfctx->seq_header_size);
+        bs += bsfctx->seq_header_size;
+        memcpy(bs, bsfctx->ep_header, bsfctx->ep_header_size);
+        bs += bsfctx->ep_header_size;
+    } else {
+        out->size = 4 + in->size;
+        out->data = av_malloc(out->size);
+        bs = out->data;
+    }
+
+    // Put the frame start code and frame data.
+    bytestream_put_be32(&bs, VC1_CODE_FRAME);
+    memcpy(bs, in->data, in->size);
+    ++bsfctx->frames;
+    return 1;
+
+ }
+
+static void asftoannexg_close(AVBSFContext *bsfc) {
+    ASFTOANNEXGBSFContext *bsfctx = bsfc->priv_data;
+    av_freep(&bsfctx->seq_header);
+    av_freep(&bsfctx->ep_header);
+}
+
+static const enum AVCodecID codec_ids[] = {
+    AV_CODEC_ID_VC1, AV_CODEC_ID_NONE,
+};
+
+AVBitStreamFilter ff_vc1_asftoannexg_bsf = {
+    .name           = "vc1_asftoannexg",
+    .priv_data_size = sizeof(ASFTOANNEXGBSFContext),
+    .filter         = asftoannexg_filter,
+    .close          = asftoannexg_close,
+    .codec_ids      = codec_ids
+};
--- a/libavcodec/vc1_asftorcv_bsf.c	1970-01-01 01:00:00.000000000 +0100
+++ b/libavcodec/vc1_asftorcv_bsf.c	2023-02-14 18:21:36.120977196 +0100
@@ -0,0 +1,95 @@
+/*
+ * copyright (c) 2010 Google Inc.
+ * copyright (c) 2017 Jacek Jendrzej port to 3.x
+ * This file is part of FFmpeg.
+ *
+ * FFmpeg is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * FFmpeg is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with FFmpeg; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#include "avcodec.h"
+#include "bytestream.h"
+#include "bsf.h"
+
+#define RCV_STREAM_HEADER_SIZE 36
+#define RCV_PICTURE_HEADER_SIZE 8
+
+typedef struct ASFTORCVBSFContext {
+    int frames;
+} ASFTORCVBSFContext;
+
+static int asftorcv_filter(AVBSFContext *ctx, AVPacket *out){
+    ASFTORCVBSFContext* bsfctx = ctx->priv_data;
+    AVPacket *in;
+    int keyframe = 0;
+    int ret = 0;
+    uint8_t* bs = NULL;
+
+    ret = ff_bsf_get_packet(ctx, &in);
+    if (ret < 0)
+        return ret;
+
+    keyframe = in->flags & AV_PKT_FLAG_KEY;
+
+    if (!bsfctx->frames) {
+        // Write the header if this is the first frame.
+        out->data = av_malloc(RCV_STREAM_HEADER_SIZE + RCV_PICTURE_HEADER_SIZE + in->size);
+        out->size = RCV_STREAM_HEADER_SIZE + RCV_PICTURE_HEADER_SIZE + in->size;
+        bs = out->data;
+
+        // The following structure of stream header comes from libavformat/vc1testenc.c.
+        bytestream_put_le24(&bs, 0);  // Frame count. 0 for streaming.
+        bytestream_put_byte(&bs, 0xC5);
+        bytestream_put_le32(&bs, 4);  // 4 bytes of extra data.
+        bytestream_put_byte(&bs, ctx->par_in->extradata[0]);
+        bytestream_put_byte(&bs, ctx->par_in->extradata[1]);
+        bytestream_put_byte(&bs, ctx->par_in->extradata[2]);
+        bytestream_put_byte(&bs, ctx->par_in->extradata[3]);
+        bytestream_put_le32(&bs, ctx->par_in->height);
+        bytestream_put_le32(&bs, ctx->par_in->width);
+        bytestream_put_le32(&bs, 0xC);
+        bytestream_put_le24(&bs, 0);  // hrd_buffer
+        bytestream_put_byte(&bs, 0x80);  // level|cbr|res1
+        bytestream_put_le32(&bs, 0);  // hrd_rate
+
+        // The following LE32 describes the frame rate. Since we don't care so fill
+        // it with 0xFFFFFFFF which means variable framerate.
+        // See: libavformat/vc1testenc.c
+        bytestream_put_le32(&bs, 0xFFFFFFFF);
+    } else {
+        out->data = av_malloc(RCV_PICTURE_HEADER_SIZE + in->size);
+        out->size = RCV_PICTURE_HEADER_SIZE + in->size;
+        bs = out->data;
+    }
+
+    // Write the picture header.
+    bytestream_put_le32(&bs, in->size | (keyframe ? 0x80000000 : 0));
+
+    //  The following LE32 describes the pts. Since we don't care so fill it with 0.
+    bytestream_put_le32(&bs, 0);
+    memcpy(bs, in->data, in->size);
+
+    ++bsfctx->frames;
+    return 0;
+}
+
+static const enum AVCodecID codec_ids[] = {
+    AV_CODEC_ID_WMV3, AV_CODEC_ID_NONE,
+};
+
+AVBitStreamFilter ff_vc1_asftorcv_bsf = {
+    .name 	    = "vc1_asftorcv",
+    .priv_data_size = sizeof(ASFTORCVBSFContext),
+    .filter         = asftorcv_filter
+};

-- 
2.14.1

